<%- include('partials/header'); -%>

  <body>
    <div class="cover-container d-flex h-100 p-5 mx-auto flex-column text-center m-5">
      <main role="main" class="inner cover">
        <h1 class="cover-heading">Find all the junior software jobs.</h1>
        <p class="lead">JobSpy will help you find a junior job etc.</p>
      </main>

      <div class="input-group rounded mb-3">
        <form class="d-flex mx-auto" id="searchBar">
          <div class="d-lg-flex mx-auto">
            <div class="input-group">
              <input class="form-control me-2" id="userInput" autocomplete="off" placeholder="Search for a job"
                aria-label="Search" />

              <button class="d-lg-none btn btn-primary" type="submit" id="searchButton">
                Search
              </button>
            </div>

            <span class="container d-flex my-3 my-lg-0">
              <select class="form-select form-select-sm me-2" style="width: auto" aria-label=".form-select-sm"
                id="location-selection">
                <option selected>All Locations</option>
                <option value="Your Location">Your Location</option>
                <option value="Auckland">Auckland</option>
                <option value="Wellington">Wellington</option>
                <option value="Christchurch">Christchurch</option>
                <option value="Dunedin">Dunedin</option>
              </select>


              <select class="form-select form-select-sm me-2" style="width: auto" aria-label=".form-select-sm"
                id="category-selection">
                <option selected>All Categories</option>
                <option value="Junior">Junior</option>
                <option value="Intermediate">Intermediate</option>
                <option value="Seior">Senior</option>
                <option value="Internship">Internship</option>
              </select>
            </span>

            <button class="d-none d-lg-block btn btn-primary" type="submit" id="searchButton">
              Search
            </button>
          </div>
        </form>
      </div>

    </div>
    <div class="container-sm recent-job-list mx-auto" data-url="/data" style="padding-bottom: 30px">
      <p class="lead text-center">Recent Job Listings:</p>
      <ol class="list-group list-group">
        <div class="d-flex justify-content-center">
          <div id="loading" class="spinner-border text-primary my-5" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <div id="results" class=""></div>
      </ol>
    </div>
    <script>
      //Manages job listings
      let jobs = ''
      let searchString = ''
      let locationSelection = ''
      let categorySelection = ''
      let defaultPage = 0

      document
        .getElementById('searchBar')
        .addEventListener('submit', userAction, false)

      // Prevents page from reloading upon form submission
      let form = document.getElementById('searchBar')
      function handleForm(event) {
        event.preventDefault()
      }
      form.addEventListener('submit', handleForm)

      // Collects users terms from the search bar and drop-down menu's and returns a job list
      function userAction() {
        locationSelection = document.getElementById('location-selection')
        categorySelection = document.getElementById('category-selection')
        searchString = document.getElementById('userInput').value

        let locationSelectionText =
          locationSelection.options[locationSelection.selectedIndex].text

        // Fetches users location data and returns the city name
        let fetchedCity = fetch('https://geolocation-db.com/json/')
          .then(function (res) {
            if (!res.ok) {
              throw Error(res.statusText)
              return 'Unable to find your location'
              document.getElementById('locationError').innerHTML =
                'Unable to find your location'
            }
            return res.json()
          })
          .then(function (locationData) {
            let cityName = locationData.city
            return cityName
          })

        if (locationSelectionText == 'Your Location') {
          fetchedCity.then(function (result) {
            locationSelectionText = result
          })
        }

        if (locationSelectionText == 'All Locations') {
          locationSelectionText = ''
        }

        let categorySelectionText =
          categorySelection.options[categorySelection.selectedIndex].text

        if (categorySelectionText == 'All Categories') {
          categorySelectionText = ''
        }

        //Loads search page with given search terms
        window.location.href =
          '/jobsearch?search=' +
          searchString +
          '&page=1&location=' +
          locationSelection.options[locationSelection.selectedIndex].text +
          '&category=' +
          categorySelection.options[categorySelection.selectedIndex].text
      }

      /**
       * Populates the job list with most recent jobs from DB
       */
      async function listRecentJobs() {
        const response = await fetch('/data')
        let jobList = ''

        const data = await response.json()

        // List of tags which will be applied to each job listing if they contain the matching keyword
        let tagDirectory = [
          '.NET',
          'JavaScript',
          'React',
          'Frontend',
          'Angular',
          'Backend',
          'C#',
          'AWS',
          'Azure',
          'Front End',
          'Full Stack',
          'Fullstack',
          'Junior',
          'Intern',
          'Internship',
          'TypeScript',
          'Senior',
          'Intermediate',
          'Python',
          'Graduate',
          'Mobile',
          'iOS',
          'Android',
        ]

        const numOfJobsToDisplay = 4
        for (i = 0; i < numOfJobsToDisplay; i++) {
          jobList += `
                <div class="modal fade" id="thanksModal" tabindex="-1" aria-labelledby="thanksModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="thanksModalLabel">Thank you for reporting.</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        If we find this content is inappropriate, we will remove it.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                    </div>
                </div>
                </div>

            <div class="modal fade" id="modal${[
              i,
            ]}" tabindex="-1" aria-labelledby="applyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content ">
                    <div class="modal-header">
                        <div class="fw-lighter" id="job-title"><p></p></div>
                        <h5 class="modal-title" id="applyModalLabel"><div class="fw-lighter fs-6">${data[i].company
            }</div> ${data[i].jobTitle}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            ${data[i].summary}
                        </p>
                        <div  class="fw-light">Is this content inappropriate? <a onclick="report('A user', '${data[i]._id
            }, ${data[i].jobTitle}, ${data[i].company}, ${data[i].summary
            }: ${data[i].link
            }')" href="#" data-bs-dismiss="modal" data-bs-toggle="modal" data-bs-target="#thanksModal">Report</a>.</div>
                    </div>
                    <div class="modal-footer">
                        <a onclick="copyClipboard()" tabindex="0" class="btn btn-outline-primary d-none d-lg-block" role="button" data-bs-toggle="popover" data-bs-trigger="focus" data-bs-content="Copied to clipboard"><i class="far fa-copy"></i></a>
                        <a onclick="share('${data[i].jobTitle}')" tabindex="0" class="btn btn-outline-primary d-lg-none" role="button"><i class="fas fa-share"></i></i></a>
                        <button type="button" class="btn btn-outline-primary">â™¡</button>
                        <a href="${data[i].link}"><button type="button" class="btn btn-primary">Apply</button></a>
                    </div>
                </div>
            </div>
        </div>

            <div style="padding-top: 10px">
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto" style="max-width: 70%;">
                        <div class="fw-lighter" id="job-title">${data[i].company
            }</div>
                        <div class="fs-5">${data[i].jobTitle}</div>
                        <div class="fs-6" style="max-width: 90%; overflow: hidden; max-height: 50px">${data[i].summary
            }</div> `

          // Assigns each job tags if keywords found in tagDirectory can be matched job's against title & summary
          for (let tagIndex = 0; tagIndex < tagDirectory.length; tagIndex++) {
            if (
              (
                data[i].jobTitle.toLowerCase() || data[i].summary.toLowerCase()
              ).includes(tagDirectory[tagIndex].toLowerCase())
            ) {
              jobList += `
          <button style="border-radius: 16px; font-size: 0.9em" type="button" class="btn btn-primary btn-sm py-0" onclick="window.location='${urlBuilder(
                tagDirectory[tagIndex],
                0
              )}';">${tagDirectory[tagIndex]}</button> `
            }
          }

          jobList += ` </div>
                    <div class="my-auto d-flex">
                        <button type="button" class="btn btn-outline-primary mx-1">â™¡</button>
                        <button type="button" class="btn btn-primary mx-1" data-bs-toggle="modal"
                        data-bs-target="#modal${[i]}">Apply</button>
                    </div>
                  </div>
              </li>
          </div>
            `
        }

        document.getElementById('results').innerHTML = jobList
        document.getElementById("loading").style.display = "none"
      }

      async function promptReport() {
        let dialogue = ''
      }

      listRecentJobs()

      /**
       * Send POST request to server with report data
       */
      async function report(user, url) {
        const data = { user, url }
        console.log(url)
        const options = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        }
        const response = await fetch('/report', options)
      }

      function urlBuilder(search) {
        let urlParams =
          'jobsearch?search=' +
          search +
          '&page=' +
          1 +
          '&location=' +
          document.getElementById('location-selection').value +
          '&category=' +
          document.getElementById('category-selection').value

        // TEMP: RETURNING INCLUDES PORT UNTIL HOSTED
        return 'http://' + window.location.hostname + ':3000/' + urlParams
      }

      function copyClipboard() {
        navigator.clipboard.writeText(window.location.href)
      }

      function share(title) {
        if (navigator.share) {
          navigator.share({
            title: 'JobSpy',
            text: title,
            url: window.location.href,
          })
            .then(() => console.log('Successful share'))
            .catch((error) => console.log('Error sharing', error));
        }
        else {
          console.log('Sharing not supported, copied to clipboard')
          navigator.clipboard.writeText(error)
        }
      }

      //Enables popovers (for the copy to clipboard button)
      function initPopover() {
        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
          return new bootstrap.Popover(popoverTriggerEl)
        })
      }

      var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
      (function () {
        var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
        s1.async = true;
        s1.src = 'https://embed.tawk.to/60ab0ec7a4114e480ad07c92/1f6e33eqn';
        s1.charset = 'UTF-8';
        s1.setAttribute('crossorigin', '*');
        s0.parentNode.insertBefore(s1, s0);
      })();
    </script>

    <%- include('partials/footer'); -%>
  </body>