<%- include('partials/header'); -%>
  <%if (user) {%>
    <script type="text/javascript" src="../testjs/testDarkMode.js"></script>
    <% } %>

      <body>
        <div class="cover-container d-flex h-100 p-5 mx-auto flex-column text-center m-5">
          <main role="main" class="inner cover">
            <h1 class="cover-heading">Find all the junior software jobs.</h1>
            <p class="lead">JobSpy will help you find a junior job etc.</p>
            <div class="input-group rounded">
              <form class="d-flex mx-auto" id="searchBar">
                <input class="form-control me-2" id="userInput" autocomplete="off" placeholder="Search for a job"
                  aria-label="Search" />
                <select class="form-select form-select-sm me-2" style="width: auto" aria-label=".form-select-sm"
                  id="location-selection">
                  <option selected>All Locations</option>
                  <option value="Your Location">Your Location</option>
                  <option value="Auckland">Auckland</option>
                  <option value="Wellington">Wellington</option>
                  <option value="Christchurch">Christchurch</option>
                  <option value="Dunedin">Dunedin</option>
                </select>

                <select class="form-select form-select-sm me-2" style="width: auto" aria-label=".form-select-sm"
                  id="category-selection">
                  <option selected>All Categories</option>
                  <option value="Junior">Junior</option>
                  <option value="Intermediate">Intermediate</option>
                  <option value="Seior">Senior</option>
                  <option value="Internship">Internship</option>
                </select>
                <button class="btn btn-primary" type="submit" id="searchButton">
                  Search
                </button>
              </form>
            </div>
          </main>
        </div>
        <div class="recent-job-list" data-url="/data" style="padding-bottom: 30px">
          <p class="lead text-center">Recent Job Listings:</p>
          <ol class="list-group list-group w-50 mx-auto">
            <div id="results" class=""></div>
          </ol>
        </div>
        <script>
          //Manages job listings
          let jobs = ''
          let searchString = ''
          let locationSelection = ''
          let categorySelection = ''
          let defaultPage = 0
          var numberOfJobs = ''

          document
            .getElementById('searchBar')
            .addEventListener('submit', userAction, false)

          // Prevents page from reloading upon form submission
          let form = document.getElementById('searchBar')
          function handleForm(event) {
            event.preventDefault()
          }
          form.addEventListener('submit', handleForm)

          // Collects users terms from the search bar and drop-down menu's and returns a job list
          function userAction() {
            locationSelection = document.getElementById('location-selection')
            categorySelection = document.getElementById('category-selection')
            searchString = document.getElementById('userInput').value

            let locationSelectionText =
              locationSelection.options[locationSelection.selectedIndex].text

            // Fetches users location data and returns the city name
            let fetchedCity = fetch('https://geolocation-db.com/json/')
              .then(function (res) {
                if (!res.ok) {
                  throw Error(res.statusText)
                  return 'Unable to find your location'
                  document.getElementById('locationError').innerHTML =
                    'Unable to find your location'
                }
                return res.json()
              })
              .then(function (locationData) {
                let cityName = locationData.city
                return cityName
              })

            if (locationSelectionText == 'Your Location') {
              fetchedCity.then(function (result) {
                locationSelectionText = result
              })
            }

            if (locationSelectionText == 'All Locations') {
              locationSelectionText = ''
            }

            let categorySelectionText =
              categorySelection.options[categorySelection.selectedIndex].text

            if (categorySelectionText == 'All Categories') {
              categorySelectionText = ''
            }

            //Loads search page with given search terms
            window.location.href =
              '/jobsearch?search=' +
              searchString +
              '&page=1&location=' +
              locationSelection.options[locationSelection.selectedIndex].text +
              '&category=' +
              categorySelection.options[categorySelection.selectedIndex].text
          }

          /**
           * Populates the job list with most recent jobs from DB
           */
          async function listRecentJobs() {
            const response = await fetch('/data')
            let jobList = ''

            const data = await response.json()

            // List of tags which will be applied to each job listing if they contain the matching keyword
            let tagDirectory = [
              '.NET',
              'JavaScript',
              'React',
              'Frontend',
              'Angular',
              'Backend',
              'C#',
              'AWS',
              'Azure',
              'Front End',
              'Full Stack',
              'Fullstack',
              'Junior',
              'Intern',
              'Internship',
              'TypeScript',
              'Senior',
              'Intermediate',
              'Python',
              'Graduate',
              'Mobile',
              'iOS',
              'Android',
            ]

            const numOfJobsToDisplay = 4
            for (i = 0; i < numOfJobsToDisplay; i++) {
              jobList += `
                <div class="modal fade" id="thanksModal" tabindex="-1" aria-labelledby="thanksModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="thanksModalLabel">Thank you for reporting.</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        If we find this content is inappropriate, we will remove it.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                    </div>
                </div>
                </div>

            <div class="modal fade" id="modal${[
                  i,
                ]}" tabindex="-1" aria-labelledby="applyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content ">
                    <div class="modal-header">
                        <div class="fw-lighter" id="job-title"><p></p></div>
                        <h5 class="modal-title" id="applyModalLabel"><div class="fw-lighter fs-6">${data[i].company
                }</div> ${data[i].jobTitle}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            ${data[i].summary}
                        </p>
                        <div  class="fw-light">Is this content inappropriate? <a onclick="report('A user', '${data[i]._id
                }, ${data[i].jobTitle}, ${data[i].company}, ${data[i].summary
                }: ${data[i].link
                }')" href="#" data-bs-dismiss="modal" data-bs-toggle="modal" data-bs-target="#thanksModal">Report</a>.</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-primary">â™¡</button>
                        <a href="${data[i].link}"><button type="button" class="btn btn-primary">Apply</button></a>
                    </div>
                </div>
            </div>
        </div>

            <div style="padding-top: 10px">
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto" style="max-width: 70%;">
                        <div class="fw-lighter" id="job-title">${data[i].company
                }</div>
                        <div class="fs-5">${data[i].jobTitle}</div>
                        <div class="fs-6" style="max-width: 90%; overflow: hidden; max-height: 50px">${data[i].summary
                }</div> `

              // Assigns each job tags if keywords found in tagDirectory can be matched job's against title & summary
              for (let tagIndex = 0; tagIndex < tagDirectory.length; tagIndex++) {
                if (
                  (
                    data[i].jobTitle.toLowerCase() || data[i].summary.toLowerCase()
                  ).includes(tagDirectory[tagIndex].toLowerCase())
                ) {
                  jobList += `
          <button style="border-radius: 16px; font-size: 0.9em" type="button" class="btn btn-primary btn-sm py-0" onclick="window.location='${urlBuilder(
                    tagDirectory[tagIndex],
                    0
                  )}';">${tagDirectory[tagIndex]}</button> `
                }
              }

              jobList += ` </div>
                    <div class="mx-2 my-auto">
                        <button type="button" class="btn btn-outline-primary">â™¡</button>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#modal${[i]}">Apply</button>
                    </div>
                  </div>
              </li>
          </div>
            `
            }

            
            document.getElementById('results').innerHTML = jobList
            numberOfJobs = document.getElementById('results').innerHTML 
            //TODO: Fix the job-cards color
            if(document.getElementById("body").style.backgroundColor === 'rgb(26, 26, 26)'){
              
              let job_cards = document.getElementById('results').getElementsByClassName('list-group-item d-flex justify-content-between align-items-start')

              for(var i= 0; i<numOfJobsToDisplay; i++){
                job_cards[i].style.backgroundColor = '#404040'
                job_cards[i].style.color = 'white'
              }
          
            }

            var test = document.getElementById('results').getElementsByClassName('mx-2 my-auto')


            for (let index = 0; index < numOfJobsToDisplay; index++) {

              test[index].addEventListener("click", favourite)


              async function favourite() {

                const id = data[index]._id
                const jobTitle = data[index].jobTitle
                const company = data[index].company
                const summary = data[index].summary
                const salary = data[index].salary
                const locations = data[index].location
                const time = data[index].time
                const link = data[index].link
                var email = ''
                '<% if(user){%>'
                email = '<%=user.email%>'
                '<% } %>'

                try {
                  const res = await fetch('/profile', {
                    method: 'POST',
                    body: JSON.stringify({ id, jobTitle, company, summary, salary, locations, time, link, email }),
                    headers: { 'Content-Type': 'application/json' }
                  })

                  const data = await res.json()
                  console.log(data)
                  if (data.errors) {

                  }
                } catch (err) {
                  console.log(err)
                }
              }
            }
            
          }



          '<%if(user){ %>'
          var setCookie = function (n, val) {
            var exdays = 30
            var d = new Date()
            d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000)
            var expires = 'expires=' + d.toGMTString()
            document.cookie = n + '=' + val + '; ' + expires
          }

          var getCookie = function (n) {
            var name = n + '='
            var ca = document.cookie.split(';')
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i]
              while (c.charAt(0) == ' ') c = c.substring(1)
              if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length)
              }
            }
            return ''
          }

     

          window.onload = function () {
            //Setting variables
            var favColor = document.body.style.backgroundColor
            var textColor = document.getElementsByClassName("text-center")[0].style.color
            var h2Tag = document.getElementsByClassName("lead text-center")[0]
            var setLocation = document.getElementById("location-selection")
            var setCatergory = document.getElementById("category-selection")
           
            
            //setCookies
            var searchBar = document.getElementById("userInput").style.backgroundColor = "white"
            setCookie('search', searchBar)


            //setting the ids
            var searchString = document.getElementById("userInput").style.backgroundColor 
            
            //getCookie
            var color = getCookie('color')
            var textNewColor = getCookie('textColor')
            var searchBarEngine = getCookie('search') 

            if (color === 'rgb(254, 253, 255)') {
              document.body.style.backgroundColor = favColor
              document.getElementsByClassName("text-center")[0].style.color = textColor
              h2Tag.style.color = textColor
              document.getElementById("userInput").style.backgroundColor = searchString
              setLocation.style.backgroundColor = searchString
              setLocation.style.color = '#808080'
              setCatergory.style.backgroundColor = searchString
              setCatergory.style.color =  '#808080'

              // for(var i = 0; i < 4; i++){
              //   jobs[i].style.backgroundColor = '#808080'
              
              }
            if(color === 'rgb(26, 26, 26)') {
              document.body.style.backgroundColor = color
              document.getElementsByClassName("text-center")[0].style.color = textNewColor
              h2Tag.style.color = textNewColor
              document.getElementById("userInput").style.backgroundColor = '#404040'
              setLocation.style.backgroundColor = '#404040'
              setLocation.style.color = '#808080'
              setCatergory.style.backgroundColor = '#404040'
              setCatergory.style.color =  '#808080'
              
              var doc = document.getElementsByClassName('navbar navbar-expand-lg navbar-light bg-light')[0]
              doc.className = doc.className.replace('navbar navbar-expand-lg navbar-light bg-light', 'navbar navbar-expand-lg navbar-dark bg-dark')
              // for(var i = 0; i < 4; i++){
              //   jobs[i].style.backgroundColor = '#808080'
              // }
            }
          }
'<%}%>'

          async function promptReport() {
            let dialogue = ''
          }

          listRecentJobs()

          /**
           * Send POST request to server with report data
           */
          async function report(user, url) {
            const data = { user, url }
            console.log(url)
            const options = {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            }
            const response = await fetch('/report', options)
          }

          function urlBuilder(search) {
            let urlParams =
              'jobsearch?search=' +
              search +
              '&page=' +
              1 +
              '&location=' +
              document.getElementById('location-selection').value +
              '&category=' +
              document.getElementById('category-selection').value

            // TEMP: RETURNING INCLUDES PORT UNTIL HOSTED
            return 'http://' + window.location.hostname + ':3000/' + urlParams
          }
        </script>

        <%- include('partials/footer'); -%>
      </body>